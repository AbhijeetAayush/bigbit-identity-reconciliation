openapi: '3.0.3'
info:
    title:
        Fn::Sub: '${AWS::StackName}-backend-apis'
    description:
        Fn::Sub: 'Backend APIs for ${AWS::StackName} Identity Reconciliation Service'
    version: '1.0'
paths:
    /identify:
        post:
            summary: Identify and reconcile customer contact
            description: Links customer contacts based on email or phone number, returning a consolidated contact.
            tags:
                - Identity Reconciliation
            requestBody:
                required: true
                content:
                    application/json:
                        schema:
                            $ref: '#/components/schemas/IdentifyRequest'
            responses:
                '200':
                    description: Successfully reconciled contact
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/IdentifyResponse'
                '400':
                    description: Invalid request data
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/ErrorResponse'
                '500':
                    description: Internal server error
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/ErrorResponse'
            x-amazon-apigateway-request-validator: ValidateBody
            x-amazon-apigateway-integration:
                type: 'aws_proxy'
                httpMethod: 'POST'
                uri:
                    Fn::Sub: 'arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${IdentifyFunction.Arn}/invocations'
                credentials:
                    Fn::Sub: '${RestApiRole.Arn}'
        options:
            summary: CORS preflight for /identify
            responses:
                '200':
                    description: Successful CORS preflight response
                    headers:
                        Access-Control-Allow-Origin:
                            schema:
                                type: string
                        Access-Control-Allow-Methods:
                            schema:
                                type: string
                        Access-Control-Allow-Headers:
                            schema:
                                type: string
                    content:
                        application/json:
                            schema:
                                type: object
                                properties: {}
            x-amazon-apigateway-integration:
                type: 'mock'
                responses:
                    default:
                        statusCode: '200'
                        responseParameters:
                            method.response.header.Access-Control-Allow-Methods: "'POST,OPTIONS'"
                            method.response.header.Access-Control-Allow-Headers: "'Content-Type'"
                            method.response.header.Access-Control-Allow-Origin: "'*'"
                requestTemplates:
                    application/json: '{"statusCode": 200}'
x-amazon-apigateway-request-validators:
    ValidateBody:
        validateRequestBody: true
        validateRequestParameters: false
components:
    schemas:
        IdentifyRequest:
            type: object
            properties:
                email:
                    type: string
                    example: 'mcfly@hillvalley.edu'
                phoneNumber:
                    type: string
                    example: '123456'
            required: []
        IdentifyResponse:
            type: object
            required:
                - contact
            properties:
                contact:
                    type: object
                    required:
                        - primaryContatctId
                        - emails
                        - phoneNumbers
                        - secondaryContactIds
                    properties:
                        primaryContatctId:
                            type: integer
                            example: 1
                        emails:
                            type: array
                            items:
                                type: string
                            example: ['lorraine@hillvalley.edu', 'mcfly@hillvalley.edu']
                        phoneNumbers:
                            type: array
                            items:
                                type: string
                            example: ['123456']
                        secondaryContactIds:
                            type: array
                            items:
                                type: integer
                            example: [23]
        ErrorResponse:
            type: object
            properties:
                error:
                    type: string
                    example: 'Either email or phoneNumber is required'
